# old ----
RESPONSIBILITY_TABLE <- as.data.table(model.matrix(~Plan_Academic_ -1,
data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)] %>%
merge(by= "ID", y= as.data.table(model.matrix(
~Plan_Financial_ -1,data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)])  %>%
merge(by= "ID", y=
as.data.table(model.matrix(
~Plan_Org_ -1,data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]) %>%
merge(by= "ID", y=
as.data.table(model.matrix(~Plan_Staff_ -1,
data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]) %>%
merge(by= "ID", y=
as.data.table(model.matrix(~Decide_Academic_ -1,
data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]) #%>%
# old ----
RESPONSIBILITY_TABLE <- as.data.table(model.matrix(~Plan_Academic_ -1,
data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)] %>%
merge(by= "ID", y= as.data.table(model.matrix(
~Plan_Financial_ -1,data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)])  %>%
merge(by= "ID", y=
as.data.table(model.matrix(
~Plan_Org_ -1,data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]) %>%
merge(by= "ID", y=
as.data.table(model.matrix(~Plan_Staff_ -1,
data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]) %>%
merge(by= "ID", y=
as.data.table(model.matrix(~Decide_Academic_ -1,
data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]) #%>%
View(REP_TABLE)
View(RESPONSIBILITY_TABLE)
source("Import.R")
View(RESPONSIBILITY_TABLE)
View(RESPONSIBILITY_TABLE)
# old ----
test_FInal <- as.data.table(model.matrix(~Plan_Academic_ -1,
data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)] %>%
merge(by= "ID", y= as.data.table(model.matrix(
~Plan_Financial_ -1,data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)])  %>%
merge(by= "ID", y=
as.data.table(model.matrix(
~Plan_Org_ -1,data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]) %>%
merge(by= "ID", y=
as.data.table(model.matrix(~Plan_Staff_ -1,
data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]) %>%
merge(by= "ID", y=
as.data.table(model.matrix(~Decide_Academic_ -1,
data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]) #%>%
# old ----
test_FInal <- as.data.table(model.matrix(~Plan_Academic_ -1,
data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)] %>%
merge(by= "ID", y= as.data.table(model.matrix(
~Plan_Financial_ -1,data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)])  %>%
merge(by= "ID", y=
as.data.table(model.matrix(
~Plan_Org_ -1,data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]) %>%
merge(by= "ID", y=
as.data.table(model.matrix(~Plan_Staff_ -1,
data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]) %>%
merge(by= "ID", y=
as.data.table(model.matrix(~Decide_Academic_ -1,
data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]) %>%
merge(by= "ID", y=
as.data.table(model.matrix(~Decide_Financial_ -1,
data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]) #%>%
name(RESPONSIBILITY_TABLE[,8])
names(RESPONSIBILITY_TABLE[,8])
?model.matrix()
lapply(RESPONSIBILITY_TABLE[,8:20], function(x) as.data.table(
model.matrix(object = ~ names(x) -1, data = RESPONSIBILITY_TABLE
)
))
lapply(RESPONSIBILITY_TABLE[,8:20], function(x) names(x))
names(RESPONSIBILITY_TABLE$Plan_Financial_)
RESPONSIBILITY_TABLE$Plan_Financial_
lapply(names(RESPONSIBILITY_TABLE[,8:20]), function(x) as.data.table(
model.matrix(object = ~ x -1, data = RESPONSIBILITY_TABLE
)
))
model.matrix(object = ~ names(RESPONSIBILITY_TABLE[,8]) -1, data = RESPONSIBILITY_TABLE)
model.matrix(object = ~ RESPONSIBILITY_TABLE[,8] -1, data = RESPONSIBILITY_TABLE)
model.matrix(object = ~ RESPONSIBILITY_TABLE$Plan_Academic_ -1, data = RESPONSIBILITY_TABLE)
lapply(RESPONSIBILITY_TABLE[,8:20], function(x) as.data.table(
model.matrix(object = ~ x -1, data = RESPONSIBILITY_TABLE
)
))
lapply(RESPONSIBILITY_TABLE[,8:20], function(x) as.data.table(
model.matrix(object = ~ x -1, data = RESPONSIBILITY_TABLE)
)[[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]]
)
lapply(RESPONSIBILITY_TABLE[,8:20], function(x) as.data.table(
model.matrix(object = ~ x -1, data = RESPONSIBILITY_TABLE)
)[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]
)
lapply(RESPONSIBILITY_TABLE[,8:20], function(x) as.data.table(
model.matrix(object = ~ x -1, data = RESPONSIBILITY_TABLE)
)[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]
)
as.data.table(
model.matrix(object =
~ RESPONSIBILITY_TABLE$Plan_Academic_ -1,
data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]
as.data.table(
model.matrix(object =
~ RESPONSIBILITY_TABLE$Decide_Financial_ -1,
data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]
as.data.table(
model.matrix(object =
~ RESPONSIBILITY_TABLE$Decide_Org_ -1,
data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]
as.data.table(
model.matrix(object =
~ RESPONSIBILITY_TABLE$Decide_Staff_ -1,
data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]
as.data.table(
model.matrix(object =
~ RESPONSIBILITY_TABLE$Decide_Academic_ -1,
data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]
as.data.table(
model.matrix(object =
~ RESPONSIBILITY_TABLE$Decide_Financial_ -1,
data = RESPONSIBILITY_TABLE))[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]
which(is.na(HEIG_DATA), arr.ind=TRUE)
which(is.na(HEIG_DATA), arr.ind=TRUE) %>%
paste("These elements are NA")
if(lenght( which(is.na(HEIG_DATA)))>0)
if(lenght( which(is.na(HEIG_DATA)))>0) print("test")
if(length( which(is.na(HEIG_DATA)))>0) print("test")
if(length( which(is.na(HEIG_DATA)))>0) print("test")
if(length( which(is.na(HEIG_DATA)))>0){
warning("The following cells in HEIG_DATA have NA values:")
paste(which(is.na(HEIG_DATA), arr.ind=TRUE))
stop()
}
if(length( which(is.na(HEIG_DATA)))>0){
warning("The following cells in HEIG_DATA have NA values:")
warning(paste(which(is.na(HEIG_DATA), arr.ind=TRUE)))
stop()
}
if(length( which(is.na(HEIG_DATA)))>0){
print("The following cells in HEIG_DATA have NA values:")
warning(paste(which(is.na(HEIG_DATA), arr.ind=TRUE)))
stop()
}
print(paste(which(is.na(HEIG_DATA), arr.ind=TRUE)))
if(length( which(is.na(HEIG_DATA)))>0){
print("The following cells in HEIG_DATA have NA values:")
print(paste(which(is.na(HEIG_DATA), arr.ind=TRUE)))
stop()
}
a
if(length( which(is.na(HEIG_DATA)))>0){
print("The following cells in HEIG_DATA have NA values:")
print(paste(which(is.na(HEIG_DATA), arr.ind=TRUE)))
stop()
}
?stop()
if(length( which(is.na(HEIG_DATA)))>0){
#print("The following cells in HEIG_DATA have NA values:")
#print(paste("The following cells in HEIG_DATA have NA values: "which(is.na(HEIG_DATA), arr.ind=TRUE)))
stop("The following cells in HEIG_DATA have NA values: ",
which(is.na(HEIG_DATA), arr.ind=TRUE))
}
#print("The following cells in HEIG_DATA have NA values:")
#print(paste("The following cells in HEIG_DATA have NA values: "which(is.na(HEIG_DATA), arr.ind=TRUE)))
stop("The following cells in HEIG_DATA have NA values: ",
paste(which(is.na(HEIG_DATA), arr.ind=TRUE), sep = " "))
paste(which(is.na(HEIG_DATA), arr.ind=TRUE), sep = " ")
paste(which(is.na(HEIG_DATA), arr.ind=TRUE), sep = ",")
which(is.na(HEIG_DATA), arr.ind=TRUE)
if(length( which(is.na(HEIG_DATA)))>0){
which(is.na(HEIG_DATA), arr.ind=TRUE)
stop("The above cells in HEIG_DATA have NA values")
}
print(which(is.na(HEIG_DATA), arr.ind=TRUE))
if(length( which(is.na(HEIG_DATA)))>0){
print(which(is.na(HEIG_DATA), arr.ind=TRUE))
stop("The above cells in HEIG_DATA have NA values")
}
source("Import.R")
#data.table function is necessary to create a copy, not just a reference.
RESPONSIBILITY_TABLE <- data.table(HEIG_DATA)
#Get rid of the unwanted columns
RESPONSIBILITY_TABLE[,8:17 := NULL][,ID:= 1:length(RESPONSIBILITY_TABLE$HEI_Name)][,]
#adjust the names for the model matrix operation
RESPONSIBILITY_TABLE[,8:19] %>%
names() %>%
sub(pattern = "(.*)", replacement = "\\1_") %>%
setnames(x=RESPONSIBILITY_TABLE,old = 8:19)
test <- lapply(RESPONSIBILITY_TABLE[,8:20], function(x) as.data.table(
model.matrix(object = ~ x -1, data = RESPONSIBILITY_TABLE)
)[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)]
)
test
?set_names()
View(HEIG_DATA)
HEIG_DATA[,by= Maintainer_Type]
HEIG_DATA[,,by= Maintainer_Type]
HEIG_DATA[,.N,by= Maintainer_Type]
HEIG_DATA[,.N,by= Maintainer_Profit]
HEIG_DATA[,.N,by= HEI_Type]
HEIG_DATA[,Certif_Communitarian,by= Maintainer_Type]
HEIG_DATA[,.N,by= Certif_Communitarian]
HEIG_DATA[,.N,by= Certif_Relig]
HEIG_DATA[Certif_Communitarian==TRUE,HEI_Name]
HEIG_DATA[Certif_Communitarian==TRUE,HEI_Type]
HEIG_DATA[HEI_Type=="University",Certif_Communitarian]
HEIG_DATA[HEI_Type=="University",Certif_Relig]
library(tidyverse)
library(data.table)
library(tinytex)
#importing----
HEIG_DATA <- read.csv("HEIG_Data.csv", header = TRUE, sep = ";", strip.white = TRUE)
#factoring----
HEIG_DATA$Maintainer_Type <-
factor(HEIG_DATA$Maintainer_Type, levels =
c("Limited", "Corporate", "Association", "Special", "Foundation")
)
HEIG_DATA$HEI_Type <-
factor(HEIG_DATA$HEI_Type, levels =
c("University", "Uni_Center", "Faculty")
)
HEIG_DATA$Rector_Appointment <-
factor(HEIG_DATA$Rector_Appointment, levels =
c("Universitocracy",  "Academicracy",  "Designatory-Colaborative",  "Designatory-Directive"))
HEIG_DATA[18:29]<- lapply(HEIG_DATA[18:29],
factor, levels = c("Executive", "Board", "Both", "None")
)
HEIG_DATA[6:17] <- sapply(HEIG_DATA[6:17], "as.logical")
HEIG_DATA$Maintainer_Profit <- sapply(HEIG_DATA$Maintainer_Type, FUN = function(x){
if(x == "Limited" || x == "Corporate"){
return("For-Profit")
}
else return("Nonprofit")
}) %>% factor()
setDT(HEIG_DATA)
HEIG_DATA[,ID:= 1:length(HEIG_DATA$HEI_Name)] %>%
setkey(cols=ID)
#check for errors in factoring
if(length( which(is.na(HEIG_DATA)))>0){
print(which(is.na(HEIG_DATA), arr.ind=TRUE))
stop("The above cells in HEIG_DATA have NA values")
}
summary(HEIG_DATA)
#Subsetting the representation variables, as percentages of each category
REP_TABLE <- HEIG_DATA[,.(
Student = mean(Repres_Student),
Alumni = mean(Repres_Alumni),
Academic = mean(Repres_Academic),
Executive = mean(Repres_Exec),
Staff = mean(Repres_Staff),
Industry = mean(Repres_Industry),
Union = mean(Repres_Union),
Owner = mean(Repres_Owner),
Government = mean(Repres_Government),
Community = mean(Repres_Community)
),by= .(Maintainer_Type)] %>%
#Renaming the grouped category to be able to bind the next round
setnames("Maintainer_Type","Institutional_Category")
#rbind adds the rows below the first table, granted they have the same col names
REP_TABLE <- rbind(REP_TABLE,
HEIG_DATA[,.(
Student = mean(Repres_Student),
Alumni = mean(Repres_Alumni),
Academic = mean(Repres_Academic),
Executive = mean(Repres_Exec),
Staff = mean(Repres_Staff),
Industry = mean(Repres_Industry),
Union = mean(Repres_Union),
Owner = mean(Repres_Owner),
Government = mean(Repres_Government),
Community = mean(Repres_Community)
),by= .(HEI_Type)] %>%
#Renaming the grouped category to be able to bind the next round
setnames("HEI_Type","Institutional_Category"))
REP_TABLE <- rbind(REP_TABLE,
HEIG_DATA[,.(
Student = mean(Repres_Student),
Alumni = mean(Repres_Alumni),
Academic = mean(Repres_Academic),
Executive = mean(Repres_Exec),
Staff = mean(Repres_Staff),
Industry = mean(Repres_Industry),
Union = mean(Repres_Union),
Owner = mean(Repres_Owner),
Government = mean(Repres_Government),
Community = mean(Repres_Community)
),by= .(Maintainer_Profit)] %>%
#Renaming the grouped category to be able to bind the next round
setnames("Maintainer_Profit","Institutional_Category"))
REP_TABLE <- rbind(REP_TABLE,
HEIG_DATA[,.(
Student = mean(Repres_Student),
Alumni = mean(Repres_Alumni),
Academic = mean(Repres_Academic),
Executive = mean(Repres_Exec),
Staff = mean(Repres_Staff),
Industry = mean(Repres_Industry),
Union = mean(Repres_Union),
Owner = mean(Repres_Owner),
Government = mean(Repres_Government),
Community = mean(Repres_Community)
),by= .(Certif_Communitarian
)][, #excluding the logical variable for grouping
Certif_Communitarian:=NULL][1, #creating the category for binding, with the correct value
Institutional_Category := "Certif_Communitarian"][1,])
REP_TABLE <- rbind(REP_TABLE,
HEIG_DATA[,.(
Student = mean(Repres_Student),
Alumni = mean(Repres_Alumni),
Academic = mean(Repres_Academic),
Executive = mean(Repres_Exec),
Staff = mean(Repres_Staff),
Industry = mean(Repres_Industry),
Union = mean(Repres_Union),
Owner = mean(Repres_Owner),
Government = mean(Repres_Government),
Community = mean(Repres_Community)
),by= .(Certif_Relig
)][, #excluding the logical variable for grouping
Certif_Relig:=NULL][1, #creating the category for binding, with the correct value
Institutional_Category := "Certif_Relig"][1,])
#transforms table into long format for ease of charting
REP_TABLE <- melt(REP_TABLE,
id.vars = "Institutional_Category",
measure.vars = c(2:11),
variable.name = "Stakeholder",
value.name = "Repres_Freq"
)
#data.table function is necessary to create a copy, not just a reference.
RESPONSIBILITY_TABLE <- data.table(HEIG_DATA)
#Get rid of the unwanted columns
RESPONSIBILITY_TABLE[,8:17 := NULL][,ID:= 1:length(RESPONSIBILITY_TABLE$HEI_Name)][,]
#adjust the names for the model matrix operation
RESPONSIBILITY_TABLE[,8:19] %>%
names() %>%
sub(pattern = "(.*)", replacement = "\\1_") %>%
setnames(x=RESPONSIBILITY_TABLE,old = 8:19)
temp <- as.data.table(RESPONSIBILITY_TABLE)
temp <- as.data.table(RESPONSIBILITY_TABLE$ID)
temp
temp <- as.data.table(ID = RESPONSIBILITY_TABLE$ID)
temp <- as.data.table(RESPONSIBILITY_TABLE[,ID])
temp
temp <- as.data.table(DF(id = RESPONSIBILITY_TABLE$ID))
temp <- as.data.table(df(id = RESPONSIBILITY_TABLE$ID))
temp <- data.table(ID = RESPONSIBILITY_TABLE$ID)
temp
View(RESPONSIBILITY_TABLE)
length(RESPONSIBILITY_TABLE)
names(RESPONSIBILITY_TABLE[,2])
for (i in 8:length(RESPONSIBILITY_TABLE)-2) {
as.data.table(model.matrix(
~RESPONSIBILITY_TABLE[,i] -1,data = RESPONSIBILITY_TABLE)
)[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)] %>%
merge(by= "ID", y= temp)
}
as.data.table(model.matrix(
~RESPONSIBILITY_TABLE[,..i] -1,data = RESPONSIBILITY_TABLE)
)[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)] %>%
merge(by= "ID", y= temp)
8:length(RESPONSIBILITY_TABLE)-2
as.data.table(model.matrix(
~RESPONSIBILITY_TABLE[,as.numeric(i)] -1,data = RESPONSIBILITY_TABLE)
)[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)] %>%
merge(by= "ID", y= temp)
temp
x <- 8
model.matrix(
~RESPONSIBILITY_TABLE[,as.numeric(x)] -1,data = RESPONSIBILITY_TABLE)
model.matrix(
~RESPONSIBILITY_TABLE[,x] -1,data = RESPONSIBILITY_TABLE)
model.matrix(
~RESPONSIBILITY_TABLE[,names(RESPONSIBILITY_TABLE)[x]] -1,data = RESPONSIBILITY_TABLE)
names(RESPONSIBILITY_TABLE)[x]
RESPONSIBILITY_TABLE[,names(RESPONSIBILITY_TABLE)[x]]
RESPONSIBILITY_TABLE[,names(RESPONSIBILITY_TABLE)[x]]
RESPONSIBILITY_TABLE[,Plan_Academic_]
model.matrix(
~names(RESPONSIBILITY_TABLE)[x] -1,data = RESPONSIBILITY_TABLE)
model.matrix(
~RESPONSIBILITY_TABLE[,.(names(RESPONSIBILITY_TABLE)[x])] -1,data = RESPONSIBILITY_TABLE)
names(RESPONSIBILITY_TABLE)[x]
c(names(RESPONSIBILITY_TABLE)[x])
as.character(names(RESPONSIBILITY_TABLE)[x])
model.matrix(
~RESPONSIBILITY_TABLE[,as.character(names(RESPONSIBILITY_TABLE)[x])] -1,data = RESPONSIBILITY_TABLE)
RESPONSIBILITY_TABLE[,as.character(names(RESPONSIBILITY_TABLE)[x])]
RESPONSIBILITY_TABLE[1:3,as.character(names(RESPONSIBILITY_TABLE)[x])]
?call()
RESPONSIBILITY_TABLE[1:3,as.integer(x)]
RESPONSIBILITY_TABLE[1:3,"Plan_Academic_"]
as.character(names(RESPONSIBILITY_TABLE)[x])
RESPONSIBILITY_TABLE[1:3,c("Plan_Academic_")]
RESPONSIBILITY_TABLE[1:3,8]
model.matrix(
~as.character(names(RESPONSIBILITY_TABLE)[x]) -1,data = RESPONSIBILITY_TABLE)
?model.matrix()
?as.col_spec()
RESPONSIBILITY_TABLE[1:3,as.col_spec(names(RESPONSIBILITY_TABLE)[x])]
RESPONSIBILITY_TABLE[1:3,as.col_spec(names(RESPONSIBILITY_TABLE)[x])]
RESPONSIBILITY_TABLE[1:3,as.name(names(RESPONSIBILITY_TABLE)[x])]
as.name(names(RESPONSIBILITY_TABLE)[x])
as.character(names(RESPONSIBILITY_TABLE)[x])
RESPONSIBILITY_TABLE[1:3,as.name(names(RESPONSIBILITY_TABLE)[x])]
8 %>%
RESPONSIBILITY_TABLE[1:3,]
8 %>%
RESPONSIBILITY_TABLE[1:3]
RESPONSIBILITY_TABLE[1:3,paste(names(RESPONSIBILITY_TABLE)[x])]
model.matrix(
~y -1,data = RESPONSIBILITY_TABLE)
y <- names(RESPONSIBILITY_TABLE)[x]
model.matrix(
~y -1,data = RESPONSIBILITY_TABLE)
y <- as.name(names(RESPONSIBILITY_TABLE)[x])
model.matrix(
~y -1,data = RESPONSIBILITY_TABLE)
y <- "Plan_Academic_"
model.matrix(
~y -1,data = RESPONSIBILITY_TABLE)
RESPONSIBILITY_TABLE[1:3,(names(RESPONSIBILITY_TABLE)[x]), with=F]
model.matrix(
~RESPONSIBILITY_TABLE[1:3,(names(RESPONSIBILITY_TABLE)[x]), with=F] -1,data = RESPONSIBILITY_TABLE)
RESPONSIBILITY_TABLE[,(names(RESPONSIBILITY_TABLE)[x]), with=F]
model.matrix( ~ RESPONSIBILITY_TABLE[,(names(RESPONSIBILITY_TABLE)[x]), with=F] -1,
data = RESPONSIBILITY_TABLE)
model.matrix( ~ get(y) -1,
data = RESPONSIBILITY_TABLE)
model.matrix( ~ get(names(RESPONSIBILITY_TABLE)[x]) -1,
data = RESPONSIBILITY_TABLE)
as.data.table(model.matrix(
~get(names(RESPONSIBILITY_TABLE)[i]) -1,data = RESPONSIBILITY_TABLE)
)[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)] %>%
merge(by= "ID", y= temp)
for (i in 8:length(RESPONSIBILITY_TABLE)-2) {
as.data.table(model.matrix(
~get(names(RESPONSIBILITY_TABLE)[i]) -1,data = RESPONSIBILITY_TABLE)
)[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)] %>%
merge(by= "ID", y= temp)
}
temp
for (i in 8:length(RESPONSIBILITY_TABLE)-2) {
as.data.table(model.matrix(
~get(names(RESPONSIBILITY_TABLE)[i]) -1,data = RESPONSIBILITY_TABLE)
)[,ID:= 1:length(RESPONSIBILITY_TABLE$ID)] %>%
merge(by= "ID", y= temp)
}
temp
for (i in 1:2) {
data.table(paste("a",i) = i) %>%
merge(y= temp)
}
for (i in 1:2) {
data.table(paste("a",i) = 1:20, ID = 1:20) %>%
merge(y= temp, by = "ID")
}
for (i in 1:2) {
merge( x= data.table(paste("a",i) = 1:20, ID = 1:20),
y= temp, by = "ID")
}
for (i in 1:2) {
merge( x= data.table(paste("a",i) = 1:20, ID = 1:20),y= temp, by = "ID")
}
for (i in 1:2)
merge( x= data.table(paste("a",i) = 1:20, ID = 1:20),y= temp, by = "ID")
for (i in 1:2) {
merge( x= data.table(paste("a",i) = 1:20, ID = 1:20),y= temp, by = "ID") }
for (i in 1:2) {
merge( x = data.table(paste("a",i) = 1:20, ID = 1:20),y= temp, by = "ID") }
merge,data.table( x = data.table(paste("a",i) = 1:20, ID = 1:20), y = temp, by = "ID") }
for (i in 1:2) {
merge.data.table( x = data.table(paste("a",i) = 1:20, ID = 1:20), y = temp, by = "ID") }
for (i in 1:2) {
print(i)
#merge( x = data.table(paste("a",i) = 1:20, ID = 1:20), y = temp, by = "ID")
}
for (i in 1:2) {
print(i)
z <- z+i
#merge( x = data.table(paste("a",i) = 1:20, ID = 1:20), y = temp, by = "ID")
}
z < 1
for (i in 1:2) {
print(i)
z <- z+i
#merge( x = data.table(paste("a",i) = 1:20, ID = 1:20), y = temp, by = "ID")
}
z
z <- 1
for (i in 1:2) {
print(i)
z <- z+i
#merge( x = data.table(paste("a",i) = 1:20, ID = 1:20), y = temp, by = "ID")
}
for (i in 1:2) {
merge( x = data.table(paste("a",i) = 1:20, ID = 1:20),
y = temp, by = "ID")
}
data.table(paste("a",i) = 1:20, ID = 1:20)
data.table(get(i) = 1:20, ID = 1:20)
library(tidyverse)
library(data.table)
library(tinytex)
data.table(get(i) = 1:20, ID = 1:20)
data.table(x = 1:20, ID = 1:20)
data.table(paste("a",x) = 1:20, ID = 1:20)
for (i in 1:2) {
merge( x = data.table(i = 1:20, ID = 1:20),
y = temp, by = "ID")
}
temp
data.table(x = 1:20, ID = 1:20)
